#include "CheckerBoard.hpp"
#include "RectangleDataReader.hpp"

using namespace benchmark;

const etl::array<etl::pair<Color, Color>, 2> CheckerBoard::k_colors = {{
    {std::make_pair(Color::BLACK, Color::WHITE)},
    {std::make_pair(Color::WHITE, Color::BLACK)},
}};

/* Generated by generate_checkerboard.py. Usage:
 * python generate_checkerboard.py generate --xml=nemeio.eink.xml
*/
const etl::array<ScreenDefs::Window, 40> CheckerBoard::k_rectangles = {
    ScreenDefs::Window{2248, 14, 144, 132},  ScreenDefs::Window{1928, 14, 144, 132},
    ScreenDefs::Window{1608, 14, 144, 132},  ScreenDefs::Window{1288, 14, 144, 132},
    ScreenDefs::Window{968, 14, 144, 132},   ScreenDefs::Window{648, 14, 144, 132},
    ScreenDefs::Window{328, 14, 144, 132},   ScreenDefs::Window{8, 14, 144, 132},
    ScreenDefs::Window{2072, 204, 152, 142}, ScreenDefs::Window{1736, 204, 152, 142},
    ScreenDefs::Window{1400, 204, 152, 142}, ScreenDefs::Window{1064, 204, 144, 142},
    ScreenDefs::Window{728, 204, 144, 142},  ScreenDefs::Window{392, 204, 144, 142},
    ScreenDefs::Window{8, 204, 192, 142},    ScreenDefs::Window{2192, 369, 200, 142},
    ScreenDefs::Window{1856, 369, 152, 142}, ScreenDefs::Window{1512, 369, 152, 142},
    ScreenDefs::Window{1176, 369, 152, 142}, ScreenDefs::Window{848, 369, 152, 142},
    ScreenDefs::Window{512, 369, 144, 142},  ScreenDefs::Window{168, 369, 152, 142},
    ScreenDefs::Window{1960, 539, 152, 142}, ScreenDefs::Window{1624, 539, 152, 142},
    ScreenDefs::Window{1288, 539, 152, 142}, ScreenDefs::Window{952, 539, 144, 142},
    ScreenDefs::Window{608, 539, 152, 142},  ScreenDefs::Window{272, 539, 152, 142},
    ScreenDefs::Window{2192, 709, 200, 142}, ScreenDefs::Window{1856, 709, 152, 142},
    ScreenDefs::Window{1512, 709, 152, 142}, ScreenDefs::Window{1184, 709, 144, 142},
    ScreenDefs::Window{840, 709, 152, 142},  ScreenDefs::Window{504, 709, 152, 142},
    ScreenDefs::Window{168, 709, 152, 142},  ScreenDefs::Window{2024, 879, 144, 142},
    ScreenDefs::Window{1688, 879, 144, 142}, ScreenDefs::Window{672, 879, 152, 142},
    ScreenDefs::Window{336, 879, 152, 142},  ScreenDefs::Window{0, 879, 152, 142},
};

CheckerBoard::CheckerBoard(AssemblyHardware& hardwareAssembly)
    : m_screen(hardwareAssembly.getScreenItem())
    , m_watchdog(hardwareAssembly.getWatchdogItem())
{
}

void CheckerBoard::draw(bool isFirstColorWhite)
{
    /* Clear screen */
    m_watchdog.refresh();
    m_screen.getAssociatedScreenController().clearScreen(m_screen);

    auto& colors = isFirstColorWhite ? k_colors[1] : k_colors[0];

    IFrameBuffer& buffer = m_screen.getAssociatedScreenController()
                               .getFrameBuffer(0, Image::eImageType::_1BPP);

    /* Fill screen with background color */
    RectangleDataReader fullScreenRectangleReader(m_screen.getScreenInfo().width,
                                                  m_screen.getScreenInfo().height,
                                                  colors.second);
    Image fullScreenImage(Image::eImageType::_1BPP, fullScreenRectangleReader);
    buffer.loadImage(fullScreenImage);

    m_watchdog.refresh();

    /* Draw checkerboard */
    for(auto& rectangle: k_rectangles)
    {
        RectangleDataReader rectangleReader(rectangle.w, rectangle.h, colors.first);
        Image rectangleImage(Image::eImageType::_1BPP, rectangleReader);
        buffer.loadImage(rectangle, rectangleImage);

        m_watchdog.refresh();
    }

    IScreenController::DisplayOptions displayOptions{eDisplayMode::FULL,
                                                     ScreenDefs::BackgroundColor::UNKNOWN};
    m_screen.getAssociatedScreenController().display(m_screen, buffer, displayOptions);
}