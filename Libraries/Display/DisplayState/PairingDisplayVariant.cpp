/*
 * PairingDisplayState.cpp
 *
 *  Created on: Sep 23, 2019
 *      Author: Labo
 */

#include "PairingDisplayVariant.hpp"
#include "utils.hpp"
#include "Image.hpp"
#include "IFrameBuffer.hpp"
#include "MemDataReader.hpp"

const uint8_t PairingDisplayVariant::keyNum[NB_DIGITS][KEY_DIGITS_BUFFER_SIZE] = {
    {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x3F, 0xFF, 0xFF, 0x00, 0x1F, 0xFF, 0xFE,
        0x00, 0x0F, 0xFF, 0xFC, 0x1F, 0x07, 0xFF, 0xFC, 0x3F, 0x87, 0xFF, 0xF8, 0x7F, 0xC3, 0xFF,
        0xF8, 0x7F, 0xC3, 0xFF, 0xF8, 0xFF, 0xC3, 0xFF, 0xF0, 0xFF, 0xE3, 0xFF, 0xF0, 0xFF, 0xE1,
        0xFF, 0xF0, 0xFF, 0xE1, 0xFF, 0xF0, 0xFF, 0xE1, 0xFF, 0xF0, 0xFF, 0xE1, 0xFF, 0xF0, 0xFF,
        0xE1, 0xFF, 0xF0, 0xFF, 0xE1, 0xFF, 0xF0, 0xFF, 0xE1, 0xFF, 0xF0, 0xFF, 0xE1, 0xFF, 0xF0,
        0xFF, 0xE1, 0xFF, 0xF0, 0xFF, 0xE1, 0xFF, 0xF0, 0xFF, 0xE1, 0xFF, 0xF0, 0xFF, 0xE1, 0xFF,
        0xF0, 0xFF, 0xE3, 0xFF, 0xF8, 0xFF, 0xC3, 0xFF, 0xF8, 0x7F, 0xC3, 0xFF, 0xF8, 0x7F, 0xC3,
        0xFF, 0xFC, 0x3F, 0x87, 0xFF, 0xFC, 0x1F, 0x07, 0xFF, 0xFE, 0x00, 0x0F, 0xFF, 0xFF, 0x00,
        0x1F, 0xFF, 0xFF, 0x80, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    },
    {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x1F, 0xFF, 0xFF, 0xFC,
        0x07, 0xFF, 0xFF, 0xFC, 0x03, 0xFF, 0xFF, 0xFC, 0x01, 0xFF, 0xFF, 0xFC, 0x30, 0x7F, 0xFF,
        0xFC, 0x38, 0x7F, 0xFF, 0xFC, 0x3C, 0xFF, 0xFF, 0xFC, 0x3E, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF,
        0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F,
        0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC,
        0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF,
        0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF,
        0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F,
        0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    },
    {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x1F, 0xFF, 0xFF, 0x00, 0x07, 0xFF, 0xFE,
        0x00, 0x03, 0xFF, 0xFC, 0x1F, 0xC3, 0xFF, 0xFC, 0x3F, 0xE3, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF,
        0xFC, 0x7F, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF,
        0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFE, 0x1F, 0xFF, 0xFF, 0xFE, 0x1F,
        0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0x83, 0xFF, 0xFF, 0xFF,
        0xC3, 0xFF, 0xFF, 0xFF, 0xE1, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF,
        0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFE, 0x1F, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0x87,
        0xFF, 0xFF, 0xFF, 0xC3, 0xFF, 0xFF, 0xFF, 0xC1, 0xFF, 0xF0, 0x00, 0x01, 0xFF, 0xF0, 0x00,
        0x01, 0xFF, 0xF0, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    },
    {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x1F, 0xFF, 0xFF, 0x00, 0x03, 0xFF, 0xFE,
        0x00, 0x01, 0xFF, 0xFC, 0x1F, 0xC1, 0xFF, 0xFC, 0x3F, 0xF3, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF,
        0xF8, 0x7F, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF,
        0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFE, 0x1F, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0x80,
        0x1F, 0xFF, 0xFF, 0xE0, 0x1F, 0xFF, 0xFF, 0x00, 0x1F, 0xFF, 0xFC, 0x0F, 0xFF, 0xFF, 0xFC,
        0x3F, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF,
        0xF0, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF,
        0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x1F, 0xF1, 0xFF, 0xFE, 0x00, 0x01, 0xFF, 0xFF, 0x00,
        0x01, 0xFF, 0xFF, 0xC0, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    },
    {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0x83, 0xFF, 0xFF, 0xFF,
        0x81, 0xFF, 0xFF, 0xFF, 0x81, 0xFF, 0xFF, 0xFF, 0x88, 0xFF, 0xFF, 0xFF, 0x88, 0x7F, 0xFF,
        0xFF, 0x84, 0x7F, 0xFF, 0xFF, 0x86, 0x3F, 0xFF, 0xFF, 0x86, 0x1F, 0xFF, 0xFF, 0x87, 0x1F,
        0xFF, 0xFF, 0x87, 0x8F, 0xFF, 0xFF, 0x87, 0x87, 0xFF, 0xFF, 0x87, 0xC7, 0xFF, 0xFF, 0x87,
        0xE3, 0xFF, 0xFF, 0x87, 0xE1, 0xFF, 0xFF, 0x87, 0xF1, 0xFF, 0xFF, 0x87, 0xF8, 0xFF, 0xFF,
        0x87, 0xF8, 0x7F, 0xFF, 0x87, 0xFC, 0x3F, 0xFF, 0x87, 0xFE, 0x3F, 0xF8, 0x00, 0x00, 0x1F,
        0xF8, 0x00, 0x00, 0x1F, 0xF8, 0x00, 0x00, 0x1F, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0x87, 0xFF,
        0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0x87,
        0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    },
    {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x07, 0xFF, 0xFC, 0x00, 0x07, 0xFF, 0xFC,
        0x00, 0x07, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0xC7, 0xFF,
        0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 0xFF, 0xC7,
        0xFF, 0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 0x80, 0x03, 0xFF, 0xFE, 0x00,
        0x03, 0xFF, 0xFC, 0x00, 0x07, 0xFF, 0xFC, 0x1F, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xF8,
        0x7F, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF,
        0xF0, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xF8, 0xFF, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF,
        0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0xFC, 0x1F, 0xF3, 0xFF, 0xFE, 0x00, 0x03, 0xFF, 0xFF, 0x00,
        0x03, 0xFF, 0xFF, 0xC0, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    },
    {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x01, 0xFF, 0xFF, 0xFC, 0x00, 0x7F, 0xFF, 0xFC,
        0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x1F, 0xFF, 0xFF, 0xFE, 0x0F, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF,
        0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 0xFF, 0xC3, 0xFF, 0xFF, 0xFF, 0xC3,
        0xFF, 0xFF, 0xFF, 0xC3, 0xFF, 0xFF, 0xC1, 0xE3, 0xFF, 0xFE, 0x00, 0x63, 0xFF, 0xFC, 0x00,
        0x21, 0xFF, 0xF8, 0x1E, 0x21, 0xFF, 0xF8, 0x7F, 0x81, 0xFF, 0xF0, 0xFF, 0xC1, 0xFF, 0xF0,
        0xFF, 0xC1, 0xFF, 0xF0, 0xFF, 0xE1, 0xFF, 0xF1, 0xFF, 0xE1, 0xFF, 0xF1, 0xFF, 0xE3, 0xFF,
        0xF1, 0xFF, 0xE3, 0xFF, 0xF0, 0xFF, 0xE3, 0xFF, 0xF0, 0xFF, 0xC3, 0xFF, 0xF0, 0xFF, 0xC7,
        0xFF, 0xF8, 0x7F, 0x87, 0xFF, 0xF8, 0x3F, 0x0F, 0xFF, 0xFC, 0x00, 0x0F, 0xFF, 0xFE, 0x00,
        0x1F, 0xFF, 0xFF, 0x80, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    },
    {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x01, 0xFF, 0xF0, 0x00, 0x01, 0xFF, 0xF0,
        0x00, 0x01, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xF8, 0xFF, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF,
        0xF8, 0x7F, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFF,
        0xFF, 0xFE, 0x1F, 0xFF, 0xFF, 0xFE, 0x1F, 0xFF, 0xFF, 0xFF, 0x0F, 0xFF, 0xFF, 0xFF, 0x0F,
        0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 0xFF,
        0xC3, 0xFF, 0xFF, 0xFF, 0xC3, 0xFF, 0xFF, 0xFF, 0xE1, 0xFF, 0xFF, 0xFF, 0xE1, 0xFF, 0xFF,
        0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xF8, 0xFF, 0xFF, 0xFF, 0xF8, 0x7F,
        0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFE,
        0x1F, 0xFF, 0xFF, 0xFE, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    },
    {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x3F, 0xFF, 0xFE, 0x00, 0x1F, 0xFF, 0xFC,
        0x00, 0x0F, 0xFF, 0xFC, 0x3F, 0x87, 0xFF, 0xF8, 0x7F, 0xC3, 0xFF, 0xF8, 0x7F, 0xC3, 0xFF,
        0xF8, 0x7F, 0xC3, 0xFF, 0xF8, 0x7F, 0xC3, 0xFF, 0xF8, 0x7F, 0xC3, 0xFF, 0xF8, 0x7F, 0xC7,
        0xFF, 0xFC, 0x3F, 0x87, 0xFF, 0xFE, 0x1E, 0x0F, 0xFF, 0xFF, 0x04, 0x1F, 0xFF, 0xFF, 0x80,
        0x3F, 0xFF, 0xFF, 0xC0, 0x7F, 0xFF, 0xFF, 0x00, 0x1F, 0xFF, 0xFE, 0x0E, 0x0F, 0xFF, 0xFC,
        0x1F, 0x87, 0xFF, 0xF8, 0x7F, 0xC3, 0xFF, 0xF8, 0x7F, 0xC3, 0xFF, 0xF0, 0xFF, 0xE1, 0xFF,
        0xF0, 0xFF, 0xE1, 0xFF, 0xF0, 0xFF, 0xE1, 0xFF, 0xF0, 0xFF, 0xE1, 0xFF, 0xF0, 0xFF, 0xE1,
        0xFF, 0xF8, 0x7F, 0xC3, 0xFF, 0xF8, 0x3F, 0x83, 0xFF, 0xFC, 0x00, 0x07, 0xFF, 0xFE, 0x00,
        0x0F, 0xFF, 0xFF, 0x80, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    },
    {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x3F, 0xFF, 0xFF, 0x00, 0x0F, 0xFF, 0xFE,
        0x00, 0x07, 0xFF, 0xFC, 0x1F, 0x87, 0xFF, 0xFC, 0x3F, 0xC3, 0xFF, 0xF8, 0x7F, 0xC3, 0xFF,
        0xF8, 0xFF, 0xE3, 0xFF, 0xF8, 0xFF, 0xE1, 0xFF, 0xF0, 0xFF, 0xE1, 0xFF, 0xF0, 0xFF, 0xE1,
        0xFF, 0xF0, 0xFF, 0xE1, 0xFF, 0xF0, 0xFF, 0xE1, 0xFF, 0xF0, 0xFF, 0xE1, 0xFF, 0xF0, 0x7F,
        0xC3, 0xFF, 0xF0, 0x3F, 0xC3, 0xFF, 0xF0, 0x0F, 0x07, 0xFF, 0xF0, 0x80, 0x0F, 0xFF, 0xF0,
        0xC0, 0x1F, 0xFF, 0xF0, 0xF0, 0x7F, 0xFF, 0xF0, 0xFF, 0xFF, 0xFF, 0xF8, 0xFF, 0xFF, 0xFF,
        0xF8, 0x7F, 0xFF, 0xFF, 0xF8, 0x7F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF, 0xFF, 0xFC, 0x3F, 0xFF,
        0xFF, 0xFE, 0x1F, 0xFF, 0xFF, 0xFF, 0x07, 0xFF, 0xFF, 0xFF, 0x00, 0x07, 0xFF, 0xFF, 0xC0,
        0x07, 0xFF, 0xFF, 0xF0, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    },
};
const uint8_t PairingDisplayVariant::keyOK[KEY_RSP_BUFFER_SIZE] = {
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF,
    0xF8, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x0F, 0xFF, 0xFF,
    0xFF, 0xFF, 0xC0, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0x01,
    0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x7F, 0xFF, 0xFF, 0x7F,
    0xFC, 0x00, 0x3F, 0xFF, 0xFE, 0x3F, 0xFE, 0x00, 0x1F, 0xFF, 0xFC, 0x1F, 0xFF, 0x00, 0x0F, 0xFF,
    0xF8, 0x0F, 0xFF, 0x80, 0x07, 0xFF, 0xF0, 0x07, 0xFF, 0xC0, 0x03, 0xFF, 0xE0, 0x03, 0xFF, 0xE0,
    0x01, 0xFF, 0xC0, 0x03, 0xFF, 0xF0, 0x00, 0xFF, 0x80, 0x07, 0xFF, 0xF8, 0x00, 0x7F, 0x00, 0x0F,
    0xFF, 0xFC, 0x00, 0x3E, 0x00, 0x1F, 0xFF, 0xFE, 0x00, 0x1C, 0x00, 0x3F, 0xFF, 0xFF, 0x00, 0x08,
    0x00, 0x7F, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x01, 0xFF, 0xFF, 0xFF,
    0xE0, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x07, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x0F, 0xFF,
    0xFF, 0xFF, 0xFC, 0x00, 0x1F, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
    0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC1, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xE3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};
const uint8_t PairingDisplayVariant::keyNOK[KEY_RSP_BUFFER_SIZE] = {
    0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFC, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xF8, 0x3F, 0xFF, 0xFF,
    0xFC, 0x1F, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xE0, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xC0, 0x07,
    0xFF, 0xFF, 0xE0, 0x03, 0x80, 0x03, 0xFF, 0xFF, 0xC0, 0x01, 0x00, 0x01, 0xFF, 0xFF, 0x80, 0x00,
    0x80, 0x00, 0xFF, 0xFF, 0x00, 0x01, 0xC0, 0x00, 0x7F, 0xFE, 0x00, 0x03, 0xE0, 0x00, 0x3F, 0xFC,
    0x00, 0x07, 0xF0, 0x00, 0x1F, 0xF8, 0x00, 0x0F, 0xF8, 0x00, 0x0F, 0xF0, 0x00, 0x1F, 0xFC, 0x00,
    0x07, 0xE0, 0x00, 0x3F, 0xFE, 0x00, 0x03, 0xC0, 0x00, 0x7F, 0xFF, 0x00, 0x01, 0x80, 0x00, 0xFF,
    0xFF, 0x80, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xE0, 0x00, 0x00,
    0x07, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFC,
    0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF,
    0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x7F, 0xFF, 0xFF, 0xFC, 0x00, 0x00,
    0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xE0,
    0x00, 0x00, 0x07, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x01, 0xFF,
    0xFF, 0x00, 0x01, 0x80, 0x00, 0xFF, 0xFE, 0x00, 0x03, 0xC0, 0x00, 0x7F, 0xFC, 0x00, 0x07, 0xE0,
    0x00, 0x3F, 0xF8, 0x00, 0x0F, 0xF0, 0x00, 0x1F, 0xF0, 0x00, 0x1F, 0xF8, 0x00, 0x0F, 0xE0, 0x00,
    0x3F, 0xFC, 0x00, 0x07, 0xC0, 0x00, 0x7F, 0xFE, 0x00, 0x03, 0x80, 0x00, 0xFF, 0xFF, 0x00, 0x01,
    0x00, 0x01, 0xFF, 0xFF, 0x80, 0x00, 0x80, 0x03, 0xFF, 0xFF, 0xC0, 0x01, 0xC0, 0x07, 0xFF, 0xFF,
    0xE0, 0x03, 0xE0, 0x0F, 0xFF, 0xFF, 0xF0, 0x07, 0xF0, 0x1F, 0xFF, 0xFF, 0xF8, 0x0F, 0xF8, 0x3F,
    0xFF, 0xFF, 0xFC, 0x1F, 0xFC, 0x7F, 0xFF, 0xFF, 0xFE, 0x3F, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F,
};
PairingDisplayVariant::PairingDisplayVariant()
    : PairingDisplayVariant(BLEDefs::Passkey())
{
}

void PairingDisplayVariant::draw(IScreen& screen, uint8_t fbNum)
{
    displayPasskey(screen, mPasskey, fbNum);
}

bool PairingDisplayVariant::operator==(const PairingDisplayVariant& variant) const
{
    return true;
}

bool PairingDisplayVariant::displayPasskey(IScreen& screen,
                                           const BLEDefs::Passkey& passkey,
                                           uint8_t fbNum)
{
    bool bRet = false;
    IFrameBuffer& frameBuffer = screen.getAssociatedScreenController()
                                    .getFrameBuffer(DIGITS_FRAME_BUFFER, DIGITS_IMAGE_TYPE);
    frameBuffer.clearContent();

    bRet = fillDigitsInFramebuffer(frameBuffer, passkey) && fillOkButtonInFramebuffer(frameBuffer)
           && fillNokButtonInFramebuffer(frameBuffer);

    if(bRet)
    {
        IScreenController::DisplayOptions displayOptions{eDisplayMode::FULL,
                                                         ScreenDefs::BackgroundColor::WHITE};
        bRet = (screen.getAssociatedScreenController().display(screen,
                                                               DIGITS_FRAME_BUFFER,
                                                               displayOptions)
                == ScreenDefs::ScreenErrCode::SUCCESS);
    }

    return bRet;
}

bool PairingDisplayVariant::fillDigitsInFramebuffer(IFrameBuffer& frameBuffer,
                                                    const BLEDefs::Passkey& passkey)
{
    bool bRet = false;


    uint16_t xCoord = KEY_DIGITS_X_START;
    for(auto& digitChar: passkey.value)
    {
        uint8_t digit = 0;

        bRet = charToDigit(digitChar, digit);
        if(bRet)
        {
            static_assert(arrayCount(keyNum) >= NB_DIGITS, "keyNum must contain the 10 digits");

            MemDataReader reader = MemDataReader(keyNum[digit], sizeof(keyNum[digit]));
            Image digitImage = Image(DIGITS_IMAGE_TYPE, reader);
            ScreenDefs::Window window(xCoord, KEY_DIGITS_Y, KEY_DIGITS_WIDTH, KEY_HEIGHT);

            bRet = frameBuffer.loadImage(window, digitImage);
        }


        if(!bRet)
        {
            break;
        }

        xCoord += KEY_DIGITS_X_SPACE;
    }

    return bRet;
}

bool PairingDisplayVariant::fillOkButtonInFramebuffer(IFrameBuffer& frameBuffer)
{
    MemDataReader reader = MemDataReader(keyOK, sizeof(keyOK));
    Image digitImage = Image(DIGITS_IMAGE_TYPE, reader);
    ScreenDefs::Window window(KEY_OK_X, KEY_OK_Y, KEY_RSP_WIDTH, KEY_HEIGHT);

    return frameBuffer.loadImage(window, digitImage);
}

bool PairingDisplayVariant::fillNokButtonInFramebuffer(IFrameBuffer& frameBuffer)
{
    MemDataReader reader = MemDataReader(keyNOK, sizeof(keyNOK));
    Image digitImage = Image(DIGITS_IMAGE_TYPE, reader);
    ScreenDefs::Window window(KEY_NOK_X, KEY_NOK_Y, KEY_RSP_WIDTH, KEY_HEIGHT);

    return frameBuffer.loadImage(window, digitImage);
}

PairingDisplayVariant::PairingDisplayVariant(const BLEDefs::Passkey& passkey)
    : MainDisplayVariant(MainDisplayVariantId::PAIRING)
    , mPasskey(passkey)
{
}
